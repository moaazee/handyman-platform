generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        String       // "customer" | "provider" | "admin"
  subscriptionStart  DateTime?

  services    Service[]
  bookings    Booking[]
  jobRequests JobRequest[]
  offers      Offer[]
}

model Service {
  id          Int      @id @default(autoincrement())
  title       String
  category    String
  description String
  image       String?
  createdAt   DateTime @default(now())

  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  bookings    Booking[]
}

model Booking {
  id          Int      @id @default(autoincrement())
  customer    String
  bookedAt    DateTime @default(now())
  serviceId   Int?
  price       Float
  status        String   @default("active")
  rescheduledAt DateTime?                   
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  service     Service?  @relation(fields: [serviceId], references: [id])
}

model JobRequest {
  id          Int       @id @default(autoincrement())
  title       String
  category    String
  description String
  image       String?
  location    String
  deadline    DateTime
  createdAt   DateTime  @default(now())
  taken       Boolean   @default(false)
  cancelled   Boolean   @default(false)  

  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  offers      Offer[]
}


model Offer {
  id           Int       @id @default(autoincrement())
  message      String
  price        Float
  available    DateTime
  createdAt    DateTime  @default(now())
  accepted     Boolean   @default(false)
  locked       Boolean   @default(false)  // We use this field to lock the offer once accepted
  closed       Boolean   @default(false)  // Add a field to close the offer once accepted

  jobRequestId Int
  providerId   Int

  jobRequest   JobRequest @relation(fields: [jobRequestId], references: [id])
  provider     User       @relation(fields: [providerId], references: [id])
}
